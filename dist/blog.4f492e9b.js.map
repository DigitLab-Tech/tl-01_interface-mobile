{"mappings":"AAAA;;;CAGC,GACD,MAAM,YAAY,SAAS,aAAa,CAAC;AAGzC;;;CAGC,GACD,MAAM,YAAY,SAAS,aAAa,CAAC;AAGzC;;;;CAIC,GACD,UAAU,gBAAgB,CAAC,SAAS;IAChC,UAAU,SAAS,CAAC,MAAM,CAAC,kBAAkB,qDAAqD;AACtG;AAQA;;;CAGC,GACD,MAAM,YAAY,SAAS,aAAa,CAAC;AAEzC;;;CAGC,GACD,MAAM,eAAe,SAAS,aAAa,CAAC;AAE5C;;;CAGC,GACD,MAAM,SAAS,SAAS,aAAa,CAAC;AAEtC;;;CAGC,GACD,MAAM,cAAc,SAAS,aAAa,CAAC;AAE3C;;;CAGC,GACD,MAAM,eAAe,SAAS,gBAAgB,CAAC;AAE/C;;;CAGC,GACD,MAAM,eAAe,SAAS,gBAAgB,CAAC;AAE/C;;;CAGC,GACD,UAAU,gBAAgB,CAAC,SAAS;IAEhC,0GAA0G;IAC1G,OAAO,SAAS,CAAC,MAAM,CAAC;IAExB,gHAAgH;IAChH,aAAa,SAAS,CAAC,MAAM,CAAC;IAC9B,aAAa,SAAS,CAAC,MAAM,CAAC;AAClC;AAGA;;;;CAIC,GACD,YAAY,gBAAgB,CAAC,YAAY,CAAC;IAEtC,oFAAoF;IACpF,MAAM,cAAc,AAAC,CAAA,YAAY,KAAK,GAAG,OAAO,GAAG,AAAD,EAAG,WAAW;IAEhE,iCAAiC;IACjC,aAAa,OAAO,CAAC,CAAA;QAEjB,qGAAqG;QACrG,MAAM,eAAe,KAAK,YAAY,CAAC,eAAe,WAAW;QAEjE,kFAAkF;QAClF,IAAG,aAAa,QAAQ,CAAC,cAErB,iFAAiF;QACjF,KAAK,SAAS,CAAC,MAAM,CAAC;aAItB,mEAAmE;QACnE,KAAK,SAAS,CAAC,GAAG,CAAC;IAE3B;IAEA,2FAA2F;IAC3F,aAAa,OAAO,CAAC,CAAA;QACjB,MAAM,eAAe,QAAQ,YAAY,CAAC,eAAe,WAAW;QACpE,IAAG,aAAa,QAAQ,CAAC,cACrB,QAAQ,SAAS,CAAC,MAAM,CAAC;aAEzB,QAAQ,SAAS,CAAC,GAAG,CAAC;IAE9B;AACJ","sources":["src/assets/js/main.js"],"sourcesContent":["/**\n * Sélectionne l'élément bouton pour basculer la vue.\n * @type {HTMLElement}\n */\nconst toggleBtn = document.querySelector('.toggleView__btn');\n\n\n/**\n * Sélectionne l'élément conteneur des cartes.\n * @type {HTMLElement}\n */\nconst container = document.querySelector('.card__container');\n\n\n/**\n * Ajoute un écouteur d'événements pour le clic sur le bouton de bascule,\n * qui bascule la classe pour modifier l'affichage.\n * @param {Event} event - L'événement de clic.\n */\ntoggleBtn.addEventListener('click', () => {\n    container.classList.toggle('displayChange'); // Basculement de la classe pour modifier l'affichage\n});\n\n\n\n\n\n\n\n/**\n * Sélectionne le bouton de recherche dans le DOM.\n * @type {HTMLElement}\n */\nconst searchBtn = document.querySelector('.search');\n\n/**\n * Sélectionne le dialogue de recherche dans le DOM.\n * @type {HTMLElement}\n */\nconst searchDialog = document.querySelector('.search__dialog');\n\n/**\n * Sélectionne la bannière dans le DOM.\n * @type {HTMLElement}\n */\nconst banner = document.querySelector('.banner');\n\n/**\n * Sélectionne le champ de recherche dans le DOM.\n * @type {HTMLInputElement}\n */\nconst searchInput = document.querySelector('.search__input');\n\n/**\n * Sélectionne toutes les cartes d'articles dans le DOM.\n * @type {NodeList}\n */\nconst articleCards = document.querySelectorAll('.article__card');\n\n/**\n * Sélectionne toutes les cartes de produits dans le DOM.\n * @type {NodeList}\n */\nconst productCards = document.querySelectorAll('.product');\n\n/**\n * Ajoute un écouteur d'événements au clic sur le bouton de recherche pour afficher ou cacher le dialogue de recherche.\n * @listens click\n */\nsearchBtn.addEventListener('click', () => {\n\n    // Basculement de la classe 'reduceBanner' sur l'élément de bannière pour réduire ou restaurer la bannière\n    banner.classList.toggle('reduceBanner');\n\n    // Basculement des classes 'hidden' et 'openFromRight' sur le dialogue de recherche pour l'afficher ou le cacher\n    searchDialog.classList.toggle('hidden');\n    searchDialog.classList.toggle('openFromRight');\n});\n\n\n/**\n * Ajoute un écouteur d'événements à la frappe de touche dans le champ de recherche pour filtrer les cartes d'articles et de produits.\n * @param {KeyboardEvent} search - L'événement de frappe de touche dans le champ de recherche.\n * @listens keypress\n */\nsearchInput.addEventListener('keypress', (search) => {\n\n    // Obtention de la valeur de recherche en convertissant le texte saisi en minuscules\n    const searchValue = (searchInput.value + search.key).toLowerCase();\n\n    // Filtrage des cartes d'articles\n    articleCards.forEach(card => {\n\n        // Obtention du résultat de recherche associé à chaque carte d'article en convertissant en minuscules\n        const searchResult = card.getAttribute('data-search').toLowerCase();\n\n        // Vérification si le résultat de recherche est inclus dans la valeur de recherche\n        if(searchResult.includes(searchValue)){\n\n            // Si c'est le cas, supprimer la classe 'hidden' pour afficher la carte d'article\n            card.classList.remove('hidden');\n        \n        } else {\n\n            // Sinon, ajouter la classe 'hidden' pour cacher la carte d'article\n            card.classList.add('hidden');\n        };\n    });\n\n    // Filtrage des cartes de produits (fonctionnement similaire à celui des cartes d'articles)\n    productCards.forEach(product => {\n        const searchResult = product.getAttribute('data-search').toLowerCase();\n        if(searchResult.includes(searchValue)){\n            product.classList.remove('hidden');\n        } else {\n            product.classList.add('hidden');\n        };\n    });\n});"],"names":[],"version":3,"file":"blog.4f492e9b.js.map","sourceRoot":"/__parcel_source_root/"}